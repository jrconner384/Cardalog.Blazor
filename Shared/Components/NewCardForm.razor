@namespace Cardalog.Shared.Components
@using Cardalog.Models
@inject HttpClient Http

@if (card != null)
{
  <EditForm Model="@card" OnValidSubmit="@HandleValidSubmit" id="CardInput">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group form-row">
      <div class="col">
        <label for="Title">Title</label>
        <InputText id="Title" @oninput="Input" autocomplete="off" @bind-Value="card.Title" class="form-control" />
        <CardMatches Cards="@cards" SearchTerm="@searchTerm" CardSelected="@CardSelected" />
      </div>
    </div>

    <div class="form-group form-row">
      <div class="col">
        <label for="Type">Type</label>
        <InputText id="Type" @bind-Value="card.Type" class="form-control" />
      </div>
      <div class="col">
        <label for="Subtype">Subtype</label>
        <InputText id="Subtype" @bind-Value="card.Subtype" class="form-control" />
      </div>
    </div>

    <div class="form-group form-row">
      <div class="col">
        <label for="Rarity">Rarity</label>
        <InputSelect id="Rarity" @bind-Value="card.Rarity" class="form-control">
          <option value="Common">Common</option>
          <option value="Uncommon">Uncommon</option>
          <option value="Rare">Rare</option>
          <option value="Legendary">Legendary</option>
        </InputSelect>
      </div>
      <div class="col">
        <label for="Condition">Condition</label>
        <InputSelect id="Condition" @bind-Value="card.Condition" class="form-control">
          <option value="Poor">Poor</option>
          <option value="Fair">Fair</option>
          <option value="Good">Good</option>
          <option value="Excellent">Excellent</option>
          <option value="Near mint">Near mint</option>
          <option value="Mint">Mint</option>
        </InputSelect>
      </div>
    </div>

    <div class="form-group form-row">
      <div class="col">
        <label for="Black">Black</label>
        <InputNumber id="Black" @bind-Value="card.Cost.Black" class="form-control" />
      </div>
      <div class="col">
        <label for="Blue">Blue</label>
        <InputNumber id="Blue" @bind-Value="card.Cost.Blue" class="form-control" />
      </div>
      <div class="col">
        <label for="Colorless">Colorless</label>
        <InputNumber id="Colorless" @bind-Value="card.Cost.Colorless" class="form-control" />
      </div>
      <div class="col">
        <label for="Green">Green</label>
        <InputNumber id="Green" @bind-Value="card.Cost.Green" class="form-control" />
      </div>
      <div class="col">
        <label for="Red">Red</label>
        <InputNumber id="Red" @bind-Value="card.Cost.Red" class="form-control" />
      </div>
      <div class="col">
        <label for="White">White</label>
        <InputNumber id="White" @bind-Value="card.Cost.White" class="form-control" />
      </div>
      <div class="col">
        <label for="Converted">Converted</label>
        <InputNumber id="Converted" @bind-Value="card.Cost.Converted" class="form-control" readonly />
      </div>
    </div>

    <div class="form-group form-row">
      <div class="col">
        <label for="Text">Text</label>
        <InputTextArea id="Text" @bind-Value="card.Text" class="form-control" />
      </div>
      <div class="col">
        <label for="FlavorText">Flavor Text</label>
        <InputTextArea id="FlavorText" @bind-Value="card.FlavorText" class="form-control" />
      </div>
    </div>

    <div class="form-group form-row">
      <div class="col-md-2">
        <label for="Power">Power</label>
        <InputNumber id="Power" @bind-Value="card.Power" class="form-control" />
      </div>
      <div class="col-md-2">
        <label for="Toughness">Toughness</label>
        <InputNumber id="Toughness" @bind-Value="card.Toughness" class="form-control" />
      </div>
      <div class="col-md-2">
        <label for="CardNumber">Number</label>
        <InputNumber id="CardNumber" @bind-Value="card.CardNumber" class="form-control" />
      </div>
      <div class="col">
        <label for="Artist">Artist</label>
        <InputText id="Artist" @bind-Value="card.Artist" class="form-control" />
      </div>
    </div>

    <h2>Expansion</h2>
    <div class="form-group form-row">
      <div class="col">
        <label for="ExpansionName">Name</label>
        <InputText id="ExpansionName" @bind-Value="card.Expansion.Name" class="form-control" />
      </div>
      <div class="col-md-3">
        <label for="ExpansionAbbreviation">Abbreviation</label>
        <InputText id="ExpansionAbbreviation" @bind-Value="card.Expansion.Abbreviation" class="form-control" />
      </div>
    </div>
    <div class="form-group form-row">
      <div class="col">
        <label for="ExpansionCopyright">Copyright</label>
        <InputText id="ExpansionCopyright" @bind-Value="card.Expansion.Copyright" class="form-control" />
      </div>
      <div class="col-md-3">
        <label for="ExpansionCards">Count</label>
        <InputNumber id="ExpansionCards" @bind-Value="card.Expansion.TotalCards" class="form-control" />
      </div>
    </div>

    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
    <button type="submit" class="btn btn-primary">Submit</button>
  </EditForm>
}

@code {
  private Card card;
  private IEnumerable<Card> cards;
  private string searchTerm = string.Empty;

  protected override async Task OnInitializedAsync()
  {
    await Task.Run(() => card = new Card());
    cards = (await Http.GetJsonAsync<Card[]>("http://localhost:7071/api/cards")).OrderBy(it => it.Title);
  }

  private async void HandleValidSubmit()
  {
    await Http.PostJsonAsync("http://localhost:7071/api/cards", card);
  }

  private void Input(ChangeEventArgs e)
  {
    searchTerm = e.Value.ToString();
  }

  private void CardSelected(string title)
  {
    var match = cards.First(it => it.TitleExpansion.Equals(title, StringComparison.InvariantCultureIgnoreCase));
    card = new Card
    {
      Title = match.Title,
      Type = match.Type,
      Subtype = match.Subtype,
      Condition = null,
      Rarity = match.Rarity,
      Cost = match.Cost,
      Text = match.Text,
      FlavorText = match.FlavorText,
      Power = match.Power,
      Toughness = match.Toughness,
      CardNumber = match.CardNumber,
      Artist = match.Artist,
      Expansion = new Expansion
      {
        Name = match.Expansion.Name,
        TotalCards = match.Expansion.TotalCards,
        Abbreviation = match.Expansion.Abbreviation,
        Copyright = match.Expansion.Copyright
      }
    };
  }
}
