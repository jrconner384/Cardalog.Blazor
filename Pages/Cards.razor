@page "/cards"
@page "/cards/view"
@page "/cards/add"
@using Cardalog.Models
@using Cardalog.Shared.Components
@inject HttpClient Http

<!-- <BSNavbar IsExpand="true" IsDark="false" Color="Color.Light" class="pagenav">
  <BSNavbarBrand Href="javascript:void(0);">Cards</BSNavbarBrand>
  <BSCollapse IsOpen="true" IsNavbar="true">
    <BSNav IsList="true" Class="mr-auto" IsNavbar="true">
      <BSNavItem>
        <BSButton OnClick="@(() => addCard.Show())" class="oi oi-plus" IsOutline="true" Size="Size.Large" Color="Color.Success"></BSButton>
      </BSNavItem>
    </BSNav>
  </BSCollapse>
</BSNavbar> -->

<button type="button" class="btn btn-outline-success oi oi-plus" data-toggle="modal" data-target="#newCardModal"></button>
<div class="modal fade" id="newCardModal" tabindex="-1" role="dialog" aria-labelledby="newCardModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h3 class="modal-title" id="newCardModalLabel">Create a card</h3>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <NewCardForm />
      </div>
    </div>
  </div>
</div>

@if (cards == null)
{
  <p><em>Loading...</em></p>
}
else
{
  <div class="main-view">
  @foreach (var card in cards)
  {
    <div class="card mtg-card">
      <div class="card-body mtg-title-row">
        <div class="card-title float-left mtg-title align-bottom">@card.Title</div>
        @if (card.Cost.Converted > 0)
        {
          <div class="mtg-cost float-right">@card.Cost.Black @card.Cost.Blue @card.Cost.Colorless @card.Cost.Green @card.Cost.Red @card.Cost.White</div>
        }
      </div>
      <span class="border-bottom"></span>
      <div class="card-subtitle mb-2 text-muted mtg-type mtg-expansion">
        @if (string.IsNullOrWhiteSpace(card.Subtype))
        {
          <div class="mtg-type float-left">@card.Type</div>
          <div class="mtg-expansion float-right">@card.Expansion.Name (@card.Rarity)</div>
        }
        else
        {
          <div class="mtg-type float-left">@card.Type - @card.Subtype</div>
          <div class="mtg-expansion float-right">@card.Expansion.Name (@card.Rarity)</div>
        }
      </div>
      <span class="border-bottom"></span>
      <div class="card-text mtg-text">@card.Text</div>
      <div class="card-text mtg-ftext font-italic">@card.FlavorText</div>
      <div class="card-footer">
        <div class="mtg-footer text-uppercase float-left">
          <div>@card.CardNumber/@card.Expansion.TotalCards &#169;@card.Expansion.Copyright</div>
          <div>@card.Expansion.Abbreviation @card.Artist</div>
        </div>
        <div class="mtg-pt float-right">
          <div class="oi oi-heart"> @card.Power </div>
          <div class="oi oi-shield"> @card.Toughness </div>
        </div>
      </div>
    </div>
  }
  </div>
}

@code {
  private Card[] cards;

  protected override async Task OnInitializedAsync()
  {
    cards = await Http.GetJsonAsync<Card[]>("http://localhost:7071/api/cards");
  }
}